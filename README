Overview
-----------
libjsonz is a lightweight JSON-parsing library written in C. It is not strict,
so, as a result, you have to pass it valid JSON data, or unspecified behaviour may occur.

The API:
*********************
	This is an object-oriented API for conveniently
	(and automatically, recursively) parsing JSON.

#include <jsonz/jsonz.h>

Types:
	JSONZ_TYPE_NULL:	a null value.
	JSONZ_TYPE_BOOL:	true or false.
	JSONZ_TYPE_INT:		an integral number.
	JSONZ_TYPE_FLOAT:	a floating-point ("real") number.
	JSONZ_TYPE_STRING:	string.
	JSONZ_TYPE_ARRAY:	array of any JSON value.
	JSONZ_TYPE_DICT:	dictionary (key-value map, associative array, ...)


Functions:

	void *jsonz_parse(const char *str);
		parses a JSON string, and returns its top-level object.
	
	void *jsonz_object_new(int type);
	void jsonz_object_free(void *obj);
		These functions manage the reference counting. Typically, a
		user needs to call `jsonz_object_free()` directly.
		
	int jsonz_object_get_type(void *obj);
		This function returns the type of a JSONZ object.

	int jsonz_number_get_bool_value(void *obj);
	long long jsonz_number_get_int_value(void *obj);
	double jsonz_number_get_float_value(void *obj);
	void jsonz_number_set_bool_value(void *obj, int b);
	void jsonz_number_set_int_value(void *obj, long long i);
	void jsonz_number_set_float_value(void *obj, double d);
		These functions operate on numbers (booleans, integers, floating-point
		numbers). Each function should only be called on a number object
		of the appropriate type (which should be obtained first by a
		call to jsonz_object_get_type()).
	
	const char *jsonz_string_get_str(void *obj);
	void jsonz_string_set_str(void *obj, const char *str_new);
	void jsonz_string_set_str_nocopy(void *obj, char *str_new);
		These functions get and set the C string owned by a JSONZ string
		object. the 'nocopy' version of the setter does not copy the
		C string; as a consequence, it performs an ownership transfer
		(i. e. the C string should be dynamically allocated).
	
	size_t jsonz_array_size(void *obj);
	void *jsonz_array_get(void *obj, unsigned idx);
	void jsonz_array_add(void *obj, void *elem);
		Accessors for arrays. `jsonz_array_add()` appends `elem` to the
		end of the array. `jsonz_array_get()` invokes undefined behavior
		if the index is out of bounds.
	
	size_t jsonz_dict_size(void *obj);
	const char *jsonz_dict_key(void *obj, unsigned index);
	void *jsonz_dict_get(void *obj, const char *key);
	void *jsonz_dict_set(void *obj, const char *key, void *elem);
		Accessors for dictionaries. `jsonz_dict_set()` copies the key.
		`jsonz_dict_get()` returns NULL when the value for the specified
		key is not found in the dictionary. `jsonz_dict_set()` returns
		the value previously associated with the key or NULL if the
		key wasn't yet in the dictionary.

